--- pbsuite/jelly/Assembly.py
+++ pbsuite/jelly/Assembly.py
@@ -33,7 +33,7 @@
     #input reads
     reads = FastqFile(query)
     #map to make the primary
-    primary= NamedTemporaryFile(prefix="primary_", suffix=".m4", delete=False, dir=basedir)
+    primary= NamedTemporaryFile(mode='w', prefix="primary_", suffix=".m4", delete=False, dir=basedir)
     primary = primary.name
     ALLTEMPFILES.append(primary)
     blasr(query, target, fmt="4", nproc=nproc, bestn=1, outname=primary)
@@ -49,7 +49,7 @@
     mapOut = open(outname, "w")
     
     #where I'm putting the tails
-    tfq = NamedTemporaryFile(prefix="tails_", suffix=".fastq", delete=False, dir=basedir)
+    tfq = NamedTemporaryFile(mode='w', prefix="tails_", suffix=".fastq", delete=False, dir=basedir)
     ALLTEMPFILES.append( tfq.name )
     whichEnd = defaultdict(list)
     #extract the tails
@@ -73,7 +73,7 @@
     tfq.close()
     logging.info("%d unmapped tails" % (ntails))
     #map tails
-    tailAlign = NamedTemporaryFile(prefix="tails_", suffix=".m5", delete=False, dir=basedir)
+    tailAlign = NamedTemporaryFile(mode='w', prefix="tails_", suffix=".m5", delete=False, dir=basedir)
     tailAlign = tailAlign.name
     ALLTEMPFILES.append(tailAlign)
     blasr(tfq.name, target, nproc=nproc, bestn=1, outname=tailAlign)
@@ -107,9 +107,9 @@
     returns queryFileName, targetFileName
     """
     global ALLTEMPFILES
-    query = NamedTemporaryFile(prefix="query_", suffix=".fastq", delete=False, dir=basedir)
+    query = NamedTemporaryFile(mode='w', prefix="query_", suffix=".fastq", delete=False, dir=basedir)
     ALLTEMPFILES.append(query.name)
-    target = NamedTemporaryFile(prefix="target_", suffix=".fasta", delete=False, dir=basedir)
+    target = NamedTemporaryFile(mode='w', prefix="target_", suffix=".fasta", delete=False, dir=basedir)
     ALLTEMPFILES.append(target.name)
     for read in reads:
         if read.startswith("ref"):
@@ -468,7 +468,7 @@
             logging.warning("fill sequence is small (%dbp) can't call consensus" % (len(bestSpan.seq)))
             #I don't know what to return here
             
-        ssfout = NamedTemporaryFile(prefix="span_", suffix=".fasta", delete=False, dir=basedir)
+        ssfout = NamedTemporaryFile(mode='w', prefix="span_", suffix=".fasta", delete=False, dir=basedir)
         ALLTEMPFILES.append(ssfout.name)
         logging.debug("spanning with %s" % (bestSpan.name))
         ssfout.write(">%s\n%s\n" % (bestSpan.name, bestSpan.seq))
@@ -483,7 +483,7 @@
         if len(bestF1E.seq) < 50:
             logging.warning("f1e sequence is small (%dbp) can't call consensus" % (len(bestF1E.seq)))
             #I don't know what to return here
-        f1sfout = NamedTemporaryFile(prefix="flank1_", suffix=".fasta", delete=False, dir=basedir)
+        f1sfout = NamedTemporaryFile(mode='w', prefix="flank1_", suffix=".fasta", delete=False, dir=basedir)
         ALLTEMPFILES.append(f1sfout.name)
         f1sfout.write(">%s\n%s\n" % (bestF1E.name, bestF1E.seq))
         f1sfout.close()
@@ -497,7 +497,7 @@
         if len(bestF2E.seq) < 50:
             logging.warning("f2e sequence is small (%dbp) can't call consensus" % (len(bestF2E.seq)))
             #I don't know what to return here
-        f2sfout = NamedTemporaryFile(prefix="flank2", suffix=".fasta", delete=False, dir=basedir)
+        f2sfout = NamedTemporaryFile(mode='w', prefix="flank2", suffix=".fasta", delete=False, dir=basedir)
         ALLTEMPFILES.append(f2sfout.name)
         f2sfout.write(">%s\n%s\n" % (bestF2E.name, bestF2E.seq))
         f2sfout.close()
@@ -519,7 +519,7 @@
     #try to build span
     if SUPPORTFLAGS.span in data.stats["support"][0]:
         logging.debug("build span")
-        alignFile = NamedTemporaryFile(prefix="scon_", suffix=".m5", delete=False, dir=args.tempDir)
+        alignFile = NamedTemporaryFile(mode='w', prefix="scon_", suffix=".m5", delete=False, dir=args.tempDir)
         alignFile.close(); alignFile = alignFile.name
         ALLTEMPFILES.append(alignFile)
         #blasr(data.spanReads, data.spanSeed, bestn = 1, nproc = args.nproc, outname=alignFile)
@@ -558,7 +558,7 @@
     logging.debug((fl1Flag, fl2Flag))
     if fl1Flag in data.stats["support"][1]:
         logging.debug("build flank1 %d" % fl1Flag)
-        alignFile = NamedTemporaryFile(prefix="f1con_", suffix=".m5", delete=False, dir=args.tempDir)
+        alignFile = NamedTemporaryFile(mode='w', prefix="f1con_", suffix=".m5", delete=False, dir=args.tempDir)
         alignFile.close(); alignFile = alignFile.name
         ALLTEMPFILES.append(alignFile)
         #blasr(data.flank1Reads, data.flank1Seed, bestn=1, nproc=args.nproc, outname=alignFile)
@@ -584,7 +584,7 @@
     
     if fl2Flag in data.stats["support"][2]:
         logging.debug("build flank2 %d" % fl2Flag)
-        alignFile = NamedTemporaryFile(prefix="f2con_", suffix=".m5", delete=False, dir=args.tempDir)
+        alignFile = NamedTemporaryFile(mode='w', prefix="f2con_", suffix=".m5", delete=False, dir=args.tempDir)
         alignFile.close(); alignFile = alignFile.name
         ALLTEMPFILES.append(alignFile)
         #blasr(data.flank2Reads, data.flank2Seed, bestn=1, nproc=args.nproc, outname=alignFile)
@@ -634,13 +634,13 @@
     """
     global ALLTEMPFILES
     data = alldata.stats
-    reads = NamedTemporaryFile(prefix="sol_", suffix=".fasta", delete=False, dir=args.tempDir)
+    reads = NamedTemporaryFile(mode='w', prefix="sol_", suffix=".fasta", delete=False, dir=args.tempDir)
     ALLTEMPFILES.append(reads.name)
     e1Seq = data["extendSeq1"]; e2Seq = data["extendSeq2"]
     reads.write(">%s\n%s\n>%s\n%s\n" % ("seq1", e1Seq, "seq2", e2Seq))
     reads.close()
     
-    alignFn = NamedTemporaryFile(prefix="sol_",suffix=".m5", delete=False, dir=args.tempDir)
+    alignFn = NamedTemporaryFile(mode='w', prefix="sol_",suffix=".m5", delete=False, dir=args.tempDir)
     ALLTEMPFILES.append(alignFn.name)
     blasr(reads.name, reads.name, nproc=args.nproc, outname=alignFn.name)
     aligns = M5File(alignFn)
@@ -688,9 +688,9 @@
     sent query, I'm going to pop all of the united reads onto this
     """
     global ALLTEMPFILES
-    alignFile = NamedTemporaryFile(prefix="uni_", suffix=".m5", delete=False, dir=args.tempDir).name
+    alignFile = NamedTemporaryFile(mode='w', prefix="uni_", suffix=".m5", delete=False, dir=args.tempDir).name
     ALLTEMPFILES.append(alignFile)
-    readFile = NamedTemporaryFile(prefix="uni_", suffix=".fasta", delete=False, dir=args.tempDir)
+    readFile = NamedTemporaryFile(mode='w', prefix="uni_", suffix=".fasta", delete=False, dir=args.tempDir)
     ALLTEMPFILES.append(readFile.name)
     
     input = FastqFile(inputFastq)
@@ -820,7 +820,7 @@
     
     preunitereads(supportFn, args)
     
-    onFlank = NamedTemporaryFile(prefix="onFlank_", suffix=".m5", delete=False, dir=args.tempDir)
+    onFlank = NamedTemporaryFile(mode='w', prefix="onFlank_", suffix=".m5", delete=False, dir=args.tempDir)
     ALLTEMPFILES.append(onFlank.name)
     onFlank.close()
     tailblasr(supportFn, flankFn, nproc=args.nproc, \
--- pbsuite/jelly/Support.py
+++ pbsuite/jelly/Support.py
@@ -8,6 +8,7 @@
 from pbsuite.utils.FileHandlers import *
 
 from networkx import Graph
+from functools import cmp_to_key
 
 USAGE = """Support.py <alignmentFile> <gapInfo> <outFile>
 
@@ -421,7 +422,7 @@
         
         newReads = self.layout(anchor, list(reads))
         
-        newReads.sort(cmp=lambda x,y: x.qstart < y.qstart)
+        newReads.sort(key=cmp_to_key(lambda x,y: x.qstart < y.qstart))
         return newReads
     
     """
@@ -483,7 +484,7 @@
                 regionHolder.qend = newGuys[-1].qend
                 ret.extend(newGuys)
         
-        ret.sort(cmp=lambda x,y: x.qstart < y.qstart)
+        ret.sort(key=cmp_to_key(lambda x,y: x.qstart < y.qstart))
         return ret
 
     def isDiscordant(self, alignment, tailAllowed=150):
@@ -703,7 +704,7 @@
         readName = alignmentGroup[0].qname
         logging.debug("looking at: " + readName + " for scaffold extension/unification")
         
-        alignmentGroup.sort(cmp=lambda x,y: x.qstart - y.qstart)
+        alignmentGroup.sort(key=cmp_to_key(lambda x,y: x.qstart - y.qstart))
         anchor = self.alignCon.getBestScore(alignmentGroup)
         
         flags = []
